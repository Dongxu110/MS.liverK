cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[legend], title = "Lee")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xpd=T)
layout(mat = c(1))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
layout(matrix(c(1,1,1,1,2,2,3,3,3,3,4,4,5,5,5,5,6,6), 3, 6, byrow = TRUE))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0)
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n",horiz=T)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n",horiz=T)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("subgroup A", "subgroup B"), fill = col[c("A","B")], title = "Roessler", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.1, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.1, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.1, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("left", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
plot(1, type="n", axes=F, xlab="", ylab="")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("top", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
plot(1, type="n", axes=F, xlab="", ylab="",frame.plot = T)
layout.show()
layout.show()
layout.show(n=1:6)
layout.show(n=2)
layout.show(n=3)
layout.show(n=4)
layout.show(n=5)
layout.show(n=6)
layout.show(n=2)
layout.show(n=6)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
plot(1, type="n", axes=F, xlab="", ylab="",frame.plot = T)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("top", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
layout(matrix(c(1,1,1,1,2,2,3,3,3,3,4,4,5,5,5,5,6,6), 3, 6, byrow = TRUE))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", xjust = 0, yjust=0, bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", xjust = 0, yjust=0.5, bty="n")
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
layout(matrix(c(1,1,1,1,2,2,3,3,3,3,4,4,5,5,5,5,6,6), 3, 6, byrow = TRUE))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
layout(matrix(c(1,1,1,1,2,3,3,3,3,4,5,5,5,5,6), 3, 5, byrow = TRUE))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
layout(matrix(c(1,1,1,1,2,2,3,3,3,3,4,4,5,5,5,5,6,6), 3, 6, byrow = TRUE))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
layout(matrix(c(1,2,3,4,5,6), 2, 3, byrow = TRUE),widths = c(2,1))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
layout.show(n=6)
layout(matrix(c(1,2,3,4,5,6), 3, 2, byrow = TRUE),widths = c(2,1))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n")
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
plot(c(1,2,3),c(1,2,3))
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n",xpd=T)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n",xpd=T)
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
library(gplots)
layout(matrix(c(1,2,3,4,5,6,7,8), 3, 2, byrow = TRUE),widths = c(2,1))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
layout(matrix(c(1,2,3,4,5,6,7,8), 4, 2, byrow = TRUE),widths = c(2,1))
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
#empty plot
frame()
legend("topleft", legend = c("A.AFP-","A.AFP+","B.AFP-","B.AFP+"), fill = col[c("A.AFP-","A.AFP+","B.AFP-","B.AFP+")], title = "Lee", bty="n",xpd=T)
legend("topright", legend = c("A", "B"), fill = col[c("subgroup A","subgroup B")], title = "Roessler", bty="n")
heatmap.2(subtypes$molecularSubtype$signatures)
subtypes$molecularSubtype$signatures
as.numeric(subtypes$molecularSubtype$signatures)
sapply(subtypes$molecularSubtype$signatures, as.numeric)
heatmap.2(sapply(subtypes$molecularSubtype$signatures, as.numeric))
df <- subtypes$molecularSubtype$prediction
expr <- ("df <- df[order(")
expr <- paste(expr, "df[,", ref, "],", sep = "")
if (length(setdiff(1:(ncol(df) - 1), ref)) > 0) {
for (c in setdiff(1:(ncol(df) - 1), ref)) expr <- paste(expr,
"df[,", c, "],", sep = "")
expr <- paste(expr, "df[,", c + 1, "]),]", sep = "")
}
else {
c <- setdiff(1:(ncol(df)), ref)
expr <- paste(expr, "df[,", c, "]),]", sep = "")
}
expr <- ("df <- df[order(")
expr <- paste(expr, "df[,", ref, "],", sep = "")
ref <- 1
expr <- ("df <- df[order(")
expr <- paste(expr, "df[,", ref, "],", sep = "")
if (length(setdiff(1:(ncol(df) - 1), ref)) > 0) {
for (c in setdiff(1:(ncol(df) - 1), ref)) expr <- paste(expr,
"df[,", c, "],", sep = "")
expr <- paste(expr, "df[,", c + 1, "]),]", sep = "")
}
else {
c <- setdiff(1:(ncol(df)), ref)
expr <- paste(expr, "df[,", c, "]),]", sep = "")
}
eval(parse(text = expr))
df <- subtypes$molecularSubtype$prediction
ref <- 1
expr <- ("df <- df[order(")
expr <- paste(expr, "df[,", ref, "],", sep = "")
if (length(setdiff(1:(ncol(df) - 1), ref)) > 0) {
for (c in setdiff(1:(ncol(df) - 1), ref)) expr <- paste(expr,
"df[,", c, "],", sep = "")
expr <- paste(expr, "df[,", c + 1, "]),]", sep = "")
}
eval(parse(text = expr))
ord = colnames(df)
ord = rownames(df)
samplesOrder = rownames(df)
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric),rowV = F,colV=F)
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F)
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none")
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F)
layout(1)
cit.dfSegmentplot(subtypes$molecularSubtype$prediction, labelscolors = col, default2cols = )
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, )
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, lwid = c(0,1),lhei = c(0,1))
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, lwid = c(.1,1),lhei = c(.1,1))
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, lwid = c(.1,.9),lhei = c(.1,.9))
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, lwid = c(1,1),lhei = c(1,1))
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F, )
heatmap.2(sapply(subtypes$molecularSubtype$signatures[samplesOrder,], as.numeric), Rowv = F, Colv = F, trace = "none", key = F)
layout(1)
help(getNums)
load("/home/florent/Documents/Ligue/Foie/package_classif_foie/CHC_GEP_RData/GSE20238-Llovet.RData")
a   <- GSE20238$clinical.data
d   <- GSE20238$GPL570$expression.data
aps <- GSE20238$GPL570$probes.data
aps$ID <- rownames(aps)
pbxgene = aps[rownames(d),c("ID","Gene.Symbol")]
load("/home/florent/Documents/Ligue/Foie/package_classif_foie/MS.liverK/data/supervised_signatures.RData")
addTypeKeep <- function(pbxgene,sep=" /// "){
pbxgene$type <- "single"
pbxgene$type[grep(sep,pbxgene[,2],fixed=T)] <- "multiple"
gsingle <- unique(pbxgene[which(pbxgene$type=="single"),2])
gmultiple <-  unique(unlist(strsplit(pbxgene[which(pbxgene$type=="multiple"),2],sep,fixed=T)))
gmultipleonly <-  setdiff( unique(unlist(strsplit(pbxgene[which(pbxgene$type=="multiple"),2]," /// ",fixed=T))) , gsingle)
l<- strsplit(pbxgene[,2]," /// ",fixed=T)
names(l) <- pbxgene[,1]
tmp <- cit.unsplit(l)
tmp <- cbind(tmp,"multipleOnly"=as.numeric(tmp[,1] %in% gmultipleonly))
pbsm <- unique(tmp[which(tmp[,3]==1),2])
pbxgene$"keep" <- 0
pbxgene[which(pbxgene[,1] %in% pbsm),"keep"] <- 1
pbxgene
}
pbxgene = addTypeKeep(pbxgene)
library(cit.utils)
pbxgene = addTypeKeep(pbxgene)
pbxgeneok <- pbxgene[-which(pbxgene$type=="multiple" & pbxgene$"keep"==0),]
d. <- cit.dfAggregate(d[pbxgeneok[,1],],pbxgeneok[,2])
wnona <- which(apply(d.,1,nb.na)==0)
d. <- d.[wnona,]
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
dag = d.
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
tmp
} })
res <- as.data.frame(res)
res
View(res)
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( #colMeans(dag[unlist(sig[[1]]),],na.rm=T),
#colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
tmp
} })
length(sig)==1
namsig = names(Lsig)[1]
namsig = names(Lsig)[[1]]
sig <- lapply(Lsig[[namsig]],intersect,g)
length(sig)==1
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
c(names(sig),namsig)
namsig = names(Lsig)[[10]]
namsig = names(Lsig)[[5]]
sig <- lapply(Lsig[[namsig]],intersect,g)
namsig = names(Lsig)[[9]]
namsig = names(Lsig)[[8]]
sig <- lapply(Lsig[[namsig]],intersect,g)
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
list(c(1,2,3),c(2,3,4),c(3,4,5))
toto = list(c(1,2,3),c(2,3,4),c(3,4,5))
list(toto[[1]])
c("Down" = 1,"Up" = 2,"Up-Down" = 3)["Down"]
c("Down" = 1,"Up" = 2,"Up-Down" = 3)["Up-Down"]
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- rep(namsig,3)
whichChosen = c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp
} })
scoreChoice = c("Down","Up","Up-Down")[3]
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- rep(namsig,3)
whichChosen = c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp
} })
res <- as.data.frame(res)
res
View(res)
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- rep(namsig,3)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
} })
res <- as.data.frame(res)
res
namsig = names(Lsig)[[1]]
sig <- lapply(Lsig[[namsig]],intersect,g)
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
rep(namsig,3)
names(tmp) <- rep(namsig,3)
tmp
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp)
tmp[[1]]
names(tmp) <- namsig
tmp[[1]]
tmp
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
res <- as.data.frame(res)
View(res)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
res <- as.data.frame(res,optional = F)
View(res)
Lsig <- supervised_signatures
g <- intersect(rownames(dag),unlist(Lsig))
dag <- dag[g,]-rowMeans(dag[g,],na.rm=T)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
res <- as.data.frame(res,)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
res <- as.data.frame(res, colnames = names(res)
)
View(res)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
res <- as.data.frame(res, check.names=F)
View(res)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- list(tmp[[whichChosen]])
names(tmp) <- namsig
} })
names(res)
attributes(res)
res
res[[1]]
res[[1]][1]
res <- as.data.frame(res)
View(res)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- tmp[[whichChosen]]
names(tmp) <- namsig
} })
res[[1]]
res[[1]][1]
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- tmp[[whichChosen]]
#names(tmp) <- namsig
} })
res[[1]][1]
res[[1]]
res <- as.data.frame(res)
View(res)
names(Lsig)
res<-lapply(names(Lsig),function(namsig){
sig <- lapply(Lsig[[namsig]],intersect,g)
if(length(sig)==1){
tmp <- list(colMeans(dag[unlist(sig),],na.rm=T))
names(tmp) <- namsig
tmp
}else{
tmp <- list( colMeans(dag[unlist(sig[[1]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T),
colMeans(dag[unlist(sig[[2]]),],na.rm=T)-colMeans(dag[unlist(sig[[1]]),],na.rm=T))
names(tmp) <- c(names(sig),namsig)
whichChosen <- c("Down" = 1,"Up" = 2,"Up-Down" = 3)[scoreChoice]
tmp <- tmp[[whichChosen]]
#names(tmp) <- namsig
} })
res <- as.data.frame(res, colnames = names(Lsig))
View(res)
colnames(res) = names(Lsig)
View(res)
