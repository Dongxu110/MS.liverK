# description >> internal
# argument
# item >> d >> ...
# item >> cols >>  ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
suppress.NA <- function (d, cols = 1:2)
{
w <- NULL
for (i in cols) w <- unique(c(w, which(is.na(d[, i]))))
if (!is.null(w))
if (length(w) > 0)
d <- d[-w, ]
d
}
# Rd
# description >> internal
# argument
# item >> data >>  ...
# item >> annot >> ...
# item >> var.annot >> ...
# item >> var.data >> ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
get.datannot <- function (data = NULL, annot = NULL, var.annot = NULL, var.data = NULL)
{
if (is.null(data) | is.null(annot))
stop("ERROR - function get.datannot : missing parameter data or annot")
if (is.null(var.data)) {
var.data <- 1:nrow(data)
}
else {
var.data <- getNums(var.data, rownames(data))
}
vd <- rownames(data)[var.data]
if (is.null(var.annot)) {
var.annot <- 1:ncol(annot)
}
else {
var.annot <- getNums(var.annot, names(annot))
}
va <- names(annot)[var.annot]
S <- unique(c(names(data), rownames(annot)))
datannot <- as.data.frame(cbind(annot[S, var.annot], t(data[var.data,
S])))
rownames(datannot) <- S
names(datannot) <- c(va, vd)
datannot
}
# Rd
# description >> internal
# argument
# item >> vco >> ...
# item >> nam >>  ...
# item >> silent >> ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
getNums  <- function (vco, nam, silent = TRUE)
{
temp <- NULL
for (co in vco) temp <- c(temp, getNum(co, nam))
if (!silent & length(temp) < length(vco))
cat("Warning - funtion getNums : some elements are not in the reference set\n")
temp
}
# Rd
# description >> internal
# argument
# item >> co >> ...
# item >> nam >>  ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
getNum  <-function (co, nam)
{
if (is.null(co))
return(NULL)
if (is.numeric(co)) {
setEmptyToNULL(intersect(co, 1:length(nam)))
}
else {
setEmptyToNULL(which(nam == co))
}
}
# Rd
# description >> internal
# argument
# item >> x >> ...
# item >> percentHighestPeak >>  ...
# item >> maxNbPeaks >>  ...
# item >> minDeltaBetweenPeaks >>  ...
# item >> deltaApproach >>  ...
# item >> doplot >>  ...
# item >> bw >>  ...
# item >> ... >>  ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
cit.peaks <-function (x, percentHighestPeak = 0.2, maxNbPeaks = NULL, minDeltaBetweenPeaks = 0.03,
deltaApproach = 1, doplot = FALSE, bw = "nrd0", ...)
{
if (is.na(minDeltaBetweenPeaks))
minDeltaBetweenPeaks <- NULL
v <- cit.density(x, pc = percentHighestPeak, bw = bw)
m <- v$y[which(v$x %in% v$top)]
w <- which(m/max(m) > percentHighestPeak)
xw <- v$top[w]
which.eq <- function(z) {
order(abs(v$x - z))[1]
}
if (deltaApproach == 1 & !is.null(minDeltaBetweenPeaks) &
length(xw) > 1) {
for (i in 1:(length(xw) - 1)) {
if (xw[i + 1] - xw[i] < minDeltaBetweenPeaks) {
xw[i:(i + 1)] <- xw[c(i:(i + 1))][which.max(m[i:(i +
1)])]
}
}
xw <- unique(xw)
}
if (!is.null(maxNbPeaks)) {
if (length(xw) > maxNbPeaks)
for (i in 1:(length(xw) - maxNbPeaks)) {
oneamong <- xw[c(0, 1) + which.min(diff(xw))]
w1 <- which.eq(oneamong[1])
w2 <- which.eq(oneamong[2])
out <- oneamong[which.min(v$y[c(w1, w2)])]
xw <- setdiff(xw, out)
}
}
umin <- NULL
if (length(xw) > 1) {
for (i in 1:(length(xw) - 1)) {
possiblemin <- v$down[which(v$down >= xw[i] & v$down <=
xw[i + 1])]
if (length(possiblemin) > 1) {
w <- sapply(possiblemin, which.eq)
possiblemin <- possiblemin[which.min(v$y[w])]
}
umin <- c(umin, possiblemin)
}
}
L <- list(`x abciss big peaks` = xw, `x abciss inter-peaks` = umin,
`nb big peaks` = length(xw))
peaks <- L[[1]]
interpeaks <- L[[2]]
temp <- as.data.frame(t(sapply(peaks, function(pic) {
wleft <- which(interpeaks < pic)
if (length(wleft) > 0) {
wleft <- max(interpeaks[wleft])
}
else {
wleft <- min(x, na.rm = TRUE)
}
wright <- which(interpeaks > pic)
if (length(wright) > 0) {
wright <- min(interpeaks[wright])
}
else {
wright <- max(x, na.rm = TRUE)
}
c(pic, wleft, wright, length(which(x >= wleft & x <=
wright)))
})))
names(temp) <- c("peak", "left born", "right born", "size")
L$"peaks x size" <- temp
if (deltaApproach == 2 & !is.null(minDeltaBetweenPeaks) &
L$"nb big peaks" > 1) {
Lini <- L
names(Lini) <- paste("initial", names(L))
while (any(diff(L$"x abciss big peaks") < minDeltaBetweenPeaks) &
L$"nb big peaks" > 1) {
w <- which.min(abs(diff(L$"x abciss big peaks")))
lb <- min(L$"peaks x size"[w:(w + 1), "left born"])
rb <- max(L$"peaks x size"[w:(w + 1), "right born"])
si <- sum(L$"peaks x size"[w:(w + 1), "size"])
pe <- median(x[which(x >= lb & x <= rb)])
L$"peaks x size"[w, ] <- c(pe, lb, rb, si)
L$"peaks x size" <- L$"peaks x size"[-(w + 1), ]
L$"nb big peaks" <- L$"nb big peaks" - 1
L$"x abciss big peaks"[w] <- pe
L$"x abciss big peaks" <- L$"x abciss big peaks"[-(w +
1)]
L$"x abciss inter-peaks" <- L$"x abciss inter-peaks"[-(w +
1)]
}
L <- c(Lini, L)
}
if (doplot) {
plot(v, ...)
abline(v = L$"x abciss big peaks", col = "red")
if (length(L$"x abciss inter-peaks") > 0)
abline(v = L$"x abciss inter-peaks", col = "green",
lty = 3)
}
L
}
# Rd
# description >> internal
# argument
# item >> x >> ...
# item >> doplot >>  ...
# item >> pc >>  ...
# item >> ... >>  ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
cit.density <-function (x, doplot = FALSE, pc = 0.05, ...)
{
dx <- density(x, na.rm = TRUE, ...)
ymax <- diff(range(dx$y))
n <- length(dx$y)
croissance <- as.numeric((dx$y[-1] - dx$y[-n]) > 0)
wB <- 1 + which(diff(croissance) == 1)
wH <- 1 + which(diff(croissance) == -1)
pointsBas <- dx$x[wB]
pointsHauts <- dx$x[intersect(wH, which(dx$y > pc * ymax))]
if (length(pointsHauts) > 0)
pointsBas <- sapply(split(pointsBas, cit.discretize(pointsBas,
pointsHauts)), median)
if (doplot) {
plot(dx, ...)
abline(v = pointsBas, lty = 3, col = "blue")
abline(v = pointsHauts, lty = 3, col = "red")
}
L <- c(dx, list(down = pointsBas, top = pointsHauts))
attr(L, "class") <- "density"
L
}
# Rd
# description >> internal
# argument
# item >> f >> ...
# item >> r >>  ...
# item >> sep >>  ...
# item >> na.strings >>  ...
# value >> ...
# author >> A de Reynies
# keyword >> internal
# end
read2 <-function (f, r = 1, sep = "\t", na.strings = "NA")
{
read.csv(f, header = TRUE, sep = sep, row.names = r, na.strings = na.strings)
}
# Rd
# description >> internal
# argument
# item >> d >> ...
# value >> ...
# author >> E Thomas, M Guedj
# keyword >> internal
# end
factorize <- function (d)
{
for (i in 1:ncol(d)) d[, i] <- as.factor(d[, i])
d
}
# Rd
# description >> internal
# argument
# item >> df >> ...
# item >> reorder >>  ...
# item >> reorder.method >>  ...
# item >> ref >>  ...
# item >> labelscolors >>  ...
# item >> default2cols >>  ...
# item >> defaultcolfun >>  ...
# item >> addrefdelim >>  ...
# item >> addrowdelim >>  ...
# item >> addsamplenames >>  ...
# item >> addPval >>  ...
# item >> addPval.function >>  ...
# item >> cex.annot >>  ...
# item >> lwd >>  ...
# value >> ...
# author >> L Marisa
# keyword >> internal
# end
cit.dfSegmentplot = function (df, reorder = TRUE, reorder.method = c("all", "paired")[1],
ref = 1, labelscolors = NULL, default2cols = c("black", "lightgrey"),
defaultcolfun = cit.rainbow, addrefdelim = FALSE,
addrowdelim = TRUE, addsamplenames = NULL, addPval = FALSE,
addPval.function = chisq.test, cex.annot = 1, lwd = 2,
...)
{
df <- factorize(df)
df <- as.data.frame(df)
if (!is.numeric(ref))
ref <- which(names(df) == ref)
if (addPval) {
pvs <- NULL
for (i in 1:ncol(df)) {
t <- table(df[, c(ref, i)])
t <- t[apply(t, 1, sum) > 0, ]
t <- t[, apply(t, 2, sum) > 0]
p <- NA
suppressWarnings(try(p <- cit.sciFormat(addPval.function(t)$p.value)))
pvs <- c(pvs, p)
}
names(df) <- paste(names(df), "   p=", pvs, sep = "")
}
if (reorder) {
if (reorder.method == "all") {
expr <- ("df <- df[order(")
expr <- paste(expr, "df[,", ref, "],", sep = "")
if (length(setdiff(1:(ncol(df) - 1), ref)) > 0) {
for (c in setdiff(1:(ncol(df) - 1), ref)) expr <- paste(expr,
"df[,", c, "],", sep = "")
expr <- paste(expr, "df[,", c + 1, "]),]", sep = "")
}
else {
c <- setdiff(1:(ncol(df)), ref)
expr <- paste(expr, "df[,", c, "]),]", sep = "")
}
eval(parse(text = expr))
}
else {
expr <- paste("df. <- data.frame(", sep = "")
if (length(setdiff(1:(ncol(df) - 1), ref)) > 0) {
for (c in 1:(ncol(df) - 1)) expr <- paste(expr,
"df[order(df[,", ref, "], df[,", c, "]),",
c, "], ", sep = "")
expr <- paste(expr, "df[order(df[,", ref, "], df[,",
c + 1, "]),", c + 1, "])", sep = "")
}
else {
c <- setdiff(1:(ncol(df)), ref)
expr <- paste(expr, "df[order(df[,", ref, "], df[,",
c, "]),", c, "])", sep = "")
}
eval(parse(text = expr))
names(df.) <- names(df)
rownames(df.) <- rownames(df)
df <- df.
}
}
mat <- matrix(NA, nc = ncol(df), nr = nrow(df))
lcols <- NULL
for (c in 1:ncol(df)) {
if (c == 1) {
offset <- 0
}
else {
offset <- min(mat[, (c - 1)], na.rm = T) + length(levels(df[,
(c - 1)])) - 1
}
mat[, c] <- as.numeric(df[, c]) + offset
cols <- levels(df[, c])
if ((max(mat[, c], na.rm = T) - offset) != length(cols))
cols <- cols[-length(cols)]
names(cols) <- cols
if (is.null(labelscolors)) {
ncols <- cols
if (length(cols) < 3) {
cols <- default2cols
}
else {
cols <- defaultcolfun(length(cols))
}
names(cols) <- ncols
lcols <- c(lcols, cols)
}
else {
if (all(cols %in% names(labelscolors))) {
cols <- labelscolors[cols]
lcols <- c(lcols, cols)
}
else {
if (length(cols) < 3) {
cols <- default2cols
}
else {
cols <- defaultcolfun(length(cols))
}
lcols <- c(lcols, cols)
}
}
}
namessize <- max(strwidth(names(df), units = "inches")) *
(cex.annot+.5)
par(mai = c(0.39375, namessize + 1.6, 0.39375, 0.39375),
oma = rep(0, 4))
image(mat[, ncol(mat):1], col = lcols, axes = F, ...)
boxl <- par("usr")
sepl <- seq(boxl[3], boxl[4], ((boxl[4] - boxl[3])/ncol(mat)))
sepl <- sepl[-c(1, length(sepl))]
if (addrowdelim)
abline(h = sepl, col = "black", lwd = lwd)
if (addrefdelim) {
sepg <- ((cumsum(table(mat[, ref])))/(nrow(mat))) * (boxl[2] -
boxl[1]) + boxl[1]
abline(v = sepg, col = "black", lty = 3, lwd = 1)
}
box(lwd = lwd)
if (reorder.method == "all") {
if (!is.null(addsamplenames))
if (addsamplenames == "top")
axis(3, at = seq(0, 1, (1/(nrow(mat) - 1))),
labels = rownames(df), tick = FALSE, las = 2,
cex.axis = cex.annot)
else axis(1, at = seq(0, 1, (1/(nrow(mat) - 1))),
labels = rownames(df), tick = FALSE, las = 2,
cex.axis = cex.annot)
}
axis(2, at = seq(0, 1, (1/(ncol(mat) - 1))), labels = rev(names(df)),
cex.axis = cex.annot, las = 2, tick = FALSE)
if (is.null(labelscolors))
lcols
}
# internal
cit.rainbow <- function (n, default2Col = c("black", "red"), default6Col = c("red",
"blue", "green", "orange", "purple", "gray"), colorMode = c("rainbow",
"gray", "grey"))
{
colorMode = match.arg(colorMode)
if (colorMode == "grey")
colorMode = "gray"
if (n == 1)
return(default2Col[1])
if (n == 2)
return(default2Col)
if (n > 6 & colorMode == "rainbow")
return(rainbow(n))
if (n < 7 & n > 2 & colorMode == "rainbow")
return(default6Col[1:n])
if (n > 2 & colorMode == "gray")
return(gray(seq(1, 0, length = n)))
}
cit.unsplit <- function (x)
{
nL <- unlist(lapply(x, length))
part <- NULL
for (i in 1:length(x)) part <- c(part, rep(names(x)[i], nL[i]))
tmp <- cbind(unlist(x), part)
attr(tmp, "dimnames") <- NULL
return(tmp)
}
discSubtypes <- as.data.frame(apply(subtypes$molecularSubtype$signatures,2,cit.discretize,"lim"=c(.2,.4,.6,.8),"quant"=T))
rownames(discSubtypes) <- rownames(subtypes$molecularSubtype$signatures)
rownames(discSubtypes)
View(discSubtypes)
rownames(subtypes)
rownames(subtypes$molecularSubtype)
rownames(subtypes$molecularSubtype$prediction)
attributes(subtypes$prognosis)
attributes(subtypes)
discretize <- function(subtypes){
S <- rownames(subtypes$molecularSubtype$prediction)
discSubtypes <- as.data.frame(apply(subtypes$molecularSubtype$signatures,2,cit.discretize,"lim"=c(.2,.4,.6,.8),"quant"=T))
rownames(discSubtypes) <- S
discProg <- as.data.frame(apply(subtypes$prognosis$signatures,2,cit.discretize,"lim"=c(.2,.4,.6,.8),"quant"=T))
rownames(discProg) <- S
discPath <- as.data.frame(apply(subtypes$biologicalPathwaysSignatures,2,cit.discretize,"lim"=c(.2,.4,.6,.8),"quant"=T))
rownames(discPath) <- S
molecularSubtype_discretized = list(prediction = subtypes$molecularSubtype$prediction, signatures = discSubtypes)
prognosis_discretized = list(prediction = subtypes$prognosis$prediction, signatures = discProg)
biologicalPathwaysSignatures_discretized = discPath
res = list(molecularSubtype_discretized=molecularSubtype_discretized,prognosis_discretized=prognosis_discretized,biologicalPathwaysSignatures_discretized=biologicalPathwaysSignatures_discretized)
return(res)
}
subtypes_disc = discretize(subtypes)
MS.liverK.plot(subtypes_disc)
MS.liverK.plot(subtypes_disc)
MS.liverK.plot(subtypes)
library(MS.liverK)
subtypes <- MS.liverK.subtypes(d,aps[rownames(d),c("ID","Gene.Symbol")],signatureChoice = "Up-Down")
load("/home/florent/Documents/Ligue/Foie/package_classif_foie/CHC_GEP_RData/GSE20238-Llovet.RData")
a   <- GSE20238$clinical.data
d   <- GSE20238$GPL570$expression.data
aps <- GSE20238$GPL570$probes.data
aps$ID <- rownames(aps)
pbxgene = aps[rownames(d),c("ID","Gene.Symbol")]
subtypes <- MS.liverK.subtypes(d,aps[rownames(d),c("ID","Gene.Symbol")],signatureChoice = "Up-Down")
MS.liverK.plot(subtypes)
subtypes_disc <- MS.liverK.discretize(subtypes)
MS.liverK.plot(subtypes_disc)
summary(subtypes_disc$molecularSubtype_discretized)
summary(subtypes_disc$molecularSubtype_discretized$signatures)
MS.liverK.plot(subtypes)
MS.liverK.plot(subtypes_disc)
library(pathifier)
data("Sheffer")
data("KEGG")
kegg$gs
kegg$pathwaynames
PDS<-quantify_pathways_deregulation(sheffer$data, sheffer$allgenes,kegg$gs, kegg$pathwaynames, sheffer$normals, attempts = 100,min_exp=sheffer$minexp, min_std=sheffer$minstd)
PDS$scores
head(sheffer$data)
load("/home/florent/Documents/Ligue/Foie/package_classif_foie/CHC_GEP_RData/GSE20238-Llovet.RData")
attributes(GSE20238)
load("/home/florent/Documents/Ligue/Foie/package_classif_foie/CHC_GEP_RData/GSE20238-Llovet.RData")
oldGSE20238 = GSE20238
rm(list="GSE20238")
GEP = oldGSE20238$GPL570$expression.data
AnnotProbeset = oldGSE20238$GPL570$probes.data
View(AnnotProbeset)
AnnotProbeset = AnnotProbeset[c("Probe.Set.ID","Gene.Symbol")]
View(GEP)
View(AnnotProbeset)
AnnotProbeset = AnnotProbeset[rownames(GEP),]
GSE20238 = list(GEP = GEP, AnnotProbeset = AnnotProbeset)
setwd("~/Documents/Ligue/Foie/package_classif_foie/MS.liverK/data/")
save(GSE20238, file = "GSE20238.RData")
